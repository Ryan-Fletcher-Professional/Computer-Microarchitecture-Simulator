SET WORD SIZE 64
SET STACK SIZE 1000000000
SET BUFFER SIZE 1000000000


LOAD #0, R1     @ Length of the array
COPY #1, R2   @ Address of the array

@ exchange sort alg
  COPY 0, R3      @i = 0
=outer_loop
      COPY 0, R4      @j = 0
    =inner_loop
        ADD R2, R3, R5     @ Address of arr[i]
        ADD R2, R4, R6     @ Address of arr[j]
        LOAD R5, R7        @ arr[i]
        LOAD R6, R8        @ arr[j]
        CMP R8, R7         @ Compare arr[i] and arr[j]
        BRN %skip_swap    @ If arr[i] <= arr[j], skip swapping
        STR R8, R5         @ Swap arr[i] and arr[j]
        STR R7, R6
    =skip_swap
      ADD R4, 1, R4     @ j++
      CMP R4, R1        @ Compare j and length
      BRN %inner_loop   @ Repeat inner loop if j < length
  ADD R3, 1, R3         @ i++
  CMP R3, R1            @ Compare i and length
  BRN %outer_loop       @ Repeat outer loop if i < length

@ Output (sorted array)
@ sorted array is now stored in memory starting from the address pointed to by R2
